/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 09 00:33:22 GMT 2025
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded(")>+J(N-Sj1-^2", "itemscopd");
      attributes0.put(attribute0);
      String string0 = attribute0.setValue((String) null);
      assertEquals("itemscopd", string0);
      assertNotNull(string0);
      
      attribute0.hashCode();
      assertEquals(")>+J(N-Sj1-^2", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(")>+J(N-Sj1-^2", "itemscopd");
      attribute0.hashCode();
      assertEquals(")>+J(N-Sj1-^2", attribute0.getKey());
      assertEquals("itemscopd", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(")K+6:J(-Sj1%a+", ")K+6:J(-Sj1%a+", attributes0);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(" ^7Eo0n", "", attributes0);
      Attribute attribute1 = new Attribute("oGGC", "8:/M&!?@ZcdP", attributes0);
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("8:/M&!?@ZcdP", attribute1.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("noresize", "e1g__nf]jvkxw0sv/*(", attributes0);
      Object object0 = new Object();
      boolean boolean0 = attribute0.equals(object0);
      assertFalse(boolean0);
      assertEquals("e1g__nf]jvkxw0sv/*(", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", (String) null);
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded(")>+J(N-Sj1-^2", "itemscopd");
      Attribute attribute1 = attribute0.clone();
      attributes0.put(attribute1);
      attribute1.setValue((String) null);
      boolean boolean0 = attribute1.equals(attribute0);
      //  // Unstable assertion: assertFalse(attribute1.equals((Object)attribute0));
      //  // Unstable assertion: assertTrue(attribute0.equals((Object)attribute1));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute("q,WAY(s{^&/l@@", "q,WAY(s{^&/l@@");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = new Attribute("M", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("noresize", "e1g__nf]jvkxw0sv/*(", attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("e1g__nf]jvkxw0sv/*(", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("TO", "TO");
      String string0 = attribute0.html();
      assertEquals("TO=\"TO\"", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("default", "", attributes0);
      String string0 = attribute0.html();
      assertEquals("", attribute0.getValue());
      assertEquals("default", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = Attribute.shouldCollapseAttribute("", "", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-&gt;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("", (String) null, (Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Node", ")>+J(N-Sj1-^2", attributes0);
      String string0 = attribute0.setValue(")>+J(N-Sj1-^2");
      assertEquals("org.jsoup.nodes.Node", attribute0.getKey());
      assertEquals("", string0);
      assertEquals(")>+J(N-Sj1-^2", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("seamless", "br", attributes0);
      assertEquals("seamless", attribute0.getKey());
      
      attribute0.setKey("seamless");
      assertEquals("br", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Tgy'F", "seamless");
      attributes0.put(attribute0);
      assertEquals("Tgy'F", attribute0.getKey());
      
      attribute0.setKey("seamless");
      assertEquals("seamless", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attribute attribute0 = new Attribute("q,WAY(s{^&/l@@", "q,WAY(s{^&/l@@");
      attribute0.setKey("q,WAY(s{^&/l@@");
      assertEquals("q,WAY(s{^&/l@@", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("A}]x!", "readonly");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("noresize", "e1g__nf]jvkxw0sv/*(", attributes0);
      String string0 = attribute0.toString();
      assertEquals("noresize=\"e1g__nf]jvkxw0sv/*(\"", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = new Attribute("Tgy'F", "seamless");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
      assertEquals("seamless", attribute0.getValue());
      assertEquals("Tgy'F", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded(")>+J(N-Sj1-^2", "itemscopd");
      attributes0.put(attribute0);
      attribute0.setValue((String) null);
      Attribute attribute1 = attribute0.clone();
      attribute0.equals(attribute1);
  }
}
