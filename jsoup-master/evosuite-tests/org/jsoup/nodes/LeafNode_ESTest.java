/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 09 00:44:11 GMT 2025
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("f?s", "f?s", "k[<FyFzCOp:M~y ", "f?s");
      Document document0 = Document.createShell("       ");
      documentType0.parentNode = (Node) document0;
      String string0 = documentType0.baseUri();
      assertEquals("       ", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("&amp;", "", false);
      String string0 = xmlDeclaration0.attr("PUBLIC");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TextNode textNode0 = new TextNode("+");
      String string0 = textNode0.toString();
      assertEquals("+", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      TextNode textNode0 = new TextNode("+");
      textNode0.doSetBaseUri("");
      assertFalse(textNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "8rf9Yb/_A^!m1}'tN!", "#Zii:UXG");
      // Undeclared exception!
      try { 
        documentType0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("O/vL ");
      TextNode textNode0 = cDataNode0.text("O/vL ");
      assertEquals("#cdata", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("O/vL ");
      boolean boolean0 = cDataNode0.hasAttr("^h{+:'5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("O/vL ");
      // Undeclared exception!
      try { 
        cDataNode0.ensureChildNodes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Leaf Nodes do not have child nodes.
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DataNode dataNode0 = new DataNode("dt");
      Node node0 = dataNode0.removeAttr("frameset");
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("f?s", "f?s", "k[<FyFzCOp:M~y ", "f?s");
      String string0 = documentType0.baseUri();
      assertEquals("", string0);
  }
}
