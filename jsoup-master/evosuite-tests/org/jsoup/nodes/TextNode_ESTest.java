/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 09 00:48:14 GMT 2025
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.OutputStreamWriter;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TextNode textNode0 = new TextNode("27 Y+X ");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      textNode0.outerHtmlHead(stringBuilder0, 2223, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TextNode textNode0 = new TextNode("^s+");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      textNode0.outerHtmlHead(stringBuilder0, 2223, document_OutputSettings0);
      assertEquals("#text", textNode0.nodeName());
      
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(201);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TextNode textNode0 = TextNode.createFromEncoded("");
      Document document0 = Document.createShell("");
      textNode0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead(stringBuilder0, 201, document_OutputSettings0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(201);
      TextNode textNode0 = TextNode.createFromEncoded("F</;%k=*b^");
      textNode0.siblingIndex = 201;
      Document document0 = Document.createShell("F</;%k=*b^");
      textNode0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead(stringBuilder0, 201, document_OutputSettings0);
      assertEquals("\n                                                                                                                                                                                                         F&lt;/;%k=*b^", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(201);
      TextNode textNode0 = TextNode.createFromEncoded("F</;%k=*b^");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      document_OutputSettings0.outline(true);
      textNode0.outerHtmlHead(stringBuilder0, 201, document_OutputSettings0);
      assertEquals("F&lt;/;%k=*b^", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TextNode textNode0 = new TextNode("code");
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      Tag tag0 = Tag.valueOf("code");
      Attributes attributes0 = textNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "code", attributes0);
      textNode0.parentNode = (Node) pseudoTextElement0;
      textNode0.outerHtmlHead(stringBuilder0, 1, document_OutputSettings0);
      assertEquals("code", stringBuilder0.toString());
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("8~zD#+[j-Ysr0O'z");
      TextNode textNode0 = cDataNode0.splitText(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      Charset charset0 = Charset.defaultCharset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(filterOutputStream0, charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      textNode0.outerHtmlHead(outputStreamWriter0, 0, document_OutputSettings1);
      assertEquals("#text", textNode0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = new TextNode("^s+");
      Tag tag0 = Tag.valueOf("^s+");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6o0vE\"T7&^$", attributes0);
      textNode0.parentNode = (Node) pseudoTextElement0;
      // Undeclared exception!
      try { 
        textNode0.splitText(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("F</;%k=*b^");
      // Undeclared exception!
      try { 
        textNode0.splitText(201);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = new TextNode("vSgYDw$A!", "vSgYDw$A!");
      // Undeclared exception!
      try { 
        textNode0.splitText((-78));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("Uy<*[>\"", "Split offset must not be greater than current text length");
      String string0 = textNode0.toString();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("Uy&lt;*[&gt;\"", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode("menuitem", (String) null);
      textNode0.outerHtmlTail((Appendable) null, 0, (Document.OutputSettings) null);
      assertEquals(0, textNode0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode("X\"i%)<90(}y%%D");
      String string0 = textNode0.text();
      assertEquals("#text", textNode0.nodeName());
      assertEquals("X\"i%)<90(}y%%D", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = TextNode.stripLeadingWhitespace("tfoot");
      assertEquals("tfoot", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = TextNode.normaliseWhitespace("Split offset must not be greater than current text length");
      assertEquals("Split offset must not be greater than current text length", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(201);
      TextNode textNode0 = TextNode.createFromEncoded("F</;%k=*b^");
      Document document0 = Document.createShell("F</;%k=*b^");
      textNode0.parentNode = (Node) document0;
      Document.OutputSettings document_OutputSettings0 = textNode0.getOutputSettings();
      textNode0.outerHtmlHead(stringBuilder0, 201, document_OutputSettings0);
  }
}
