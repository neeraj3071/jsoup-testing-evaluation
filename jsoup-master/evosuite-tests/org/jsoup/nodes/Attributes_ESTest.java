/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 09 00:35:01 GMT 2025
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("dus", "");
      Attributes attributes2 = attributes0.clone();
      boolean boolean0 = attributes2.equals(attributes1);
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, attributes1.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("ri@>H{n~*+P:Ca6", "yu");
      Attributes attributes2 = attributes1.put(attribute0);
      boolean boolean0 = attributes2.equals(attributes0);
      assertEquals(1, attributes1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals(attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Object object0 = new Object();
      boolean boolean0 = attributes0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("bZMlp_|myy04hy_I", true);
      MockFile mockFile0 = new MockFile("bZMlp_|myy04hy_I", "5<#bA`[");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      attributes0.html((Appendable) mockPrintWriter0, document_OutputSettings1);
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase(">\"ker+!#B6='k", (String) null);
      attributes0.html();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Z-`rY[$k1!e$t&)_?Z", "Z-`rY[$k1!e$t&)_?Z");
      String string0 = attributes1.toString();
      assertEquals(1, attributes0.size());
      assertEquals(" Z-`rY[$k1!e$t&)_?Z=\"Z-`rY[$k1!e$t&amp;)_?Z\"", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("=[fiXb%mSN%ixey#p", "=[fiXb%mSN%ixey#p");
      attributes0.asList();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("=[fiXb%mSN%ixey#p", true);
      attributes1.asList();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.addAll(attributes0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKeyIgnoreCase("9>`~Vdl+Q3tA[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("dmjbwhzb\u0002g5", true);
      boolean boolean0 = attributes1.hasKey("dmjbwhzb\u0002g5");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKey("0zb:2AG5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("=[fiXb%mSN%ixey#p", true);
      assertEquals(1, attributes0.size());
      
      attributes0.removeIgnoreCase("=[fiXb%mSN%ixey#p");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.removeIgnoreCase("meta[charset]");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("@z0wyEoU", "@z0wyEoU");
      attributes0.put(attribute0);
      attributes0.put("org.jsoup.nodes.Attributes", "");
      attributes0.remove("@z0wyEoU");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Z-`rY[$k1!e$t&)_?Z", false);
      assertEquals(0, attributes1.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("@z0wyEoU", "@z0wyEoU");
      attributes0.normalize();
      attributes0.putIgnoreCase("@z0wyEoU", "Leaf Nodes do not have child nodes.");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.getIgnoreCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.get("$}wsm)~hg):");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("dmjbwhzb\u0002g5", true);
      attributes0.get("dmjbwhzb\u0002g5");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("dmjbwhzb\u0002g5", true);
      attributes0.getIgnoreCase("dmjbwhzb\u0002g5");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = Attributes.checkNotNull("`As:q6.&");
      assertEquals("`As:q6.&", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("Z-`rY[$k1!e$t&)_?Z", "Z-`rY[$k1!e$t&)_?Z");
      boolean boolean0 = attributes0.hasKeyIgnoreCase("Z-`rY[$k1!e$t&)_?Z");
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Z-`rY[$k1!e$t&)_?Z", "Z-`rY[$k1!e$t&)_?Z");
      Attribute attribute0 = Attribute.createFromEncoded("@z0wyEoU", "@z0wyEoU");
      attributes1.put(attribute0);
      Attributes attributes2 = attributes1.clone();
      attributes2.put("org.jsoup.nodes.Attributes", "");
      attributes0.addAll(attributes2);
      assertEquals(3, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Z-`rY[$k1!e$t&)_?Z", "Z-`rY[$k1!e$t&)_?Z");
      Attribute attribute0 = Attribute.createFromEncoded("@z0wyEoU", "@z0wyEoU");
      attributes1.put(attribute0);
      attributes1.put("jDZStXf%gk^ooW1iN&", true);
      attributes0.addAll(attributes0);
      assertEquals(3, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hashCode();
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("@z0wyEoU", "@z0wyEoU");
      attributes0.put(attribute0);
      attributes0.putIgnoreCase("@z0wyEoU", "Q0ySn&FXVz(aa&)>N");
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      boolean boolean0 = attributes1.equals(attributes0);
      assertNotSame(attributes1, attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      assertEquals(0, attributes0.size());
  }
}
