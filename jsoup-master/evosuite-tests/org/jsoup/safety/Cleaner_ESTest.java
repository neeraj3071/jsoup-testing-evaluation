/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 09 01:09:07 GMT 2025
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cleaner_ESTest extends Cleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      whitelist0.addEnforcedAttribute("body", "body", "body");
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = new Document("JD<!H<?L");
      Document document1 = cleaner0.clean(document0);
      Document document2 = cleaner0.clean(document1);
      boolean boolean0 = cleaner0.isValid(document2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.relaxed();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("n4e{gVv<6WJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("J_-qsY");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.none();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = new Document("J_-qsY");
      Document document1 = cleaner0.clean(document0);
      Charset charset0 = Charset.defaultCharset();
      document1.charset(charset0);
      boolean boolean0 = cleaner0.isValid(document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      whitelist0.addEnforcedAttribute("body", "body", "body");
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = new Document("body");
      Document document1 = cleaner0.clean(document0);
      Document document2 = cleaner0.clean(document1);
      assertEquals(1, document2.childNodeSize());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "body";
      stringArray0[1] = "body";
      whitelist0.removeTags(stringArray0);
      boolean boolean0 = cleaner0.isValid(document2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basic();
      whitelist0.addEnforcedAttribute("body", "body", "body");
      Cleaner cleaner0 = new Cleaner(whitelist0);
      cleaner0.isValidBodyHtml("JD<!H<?L");
  }
}
