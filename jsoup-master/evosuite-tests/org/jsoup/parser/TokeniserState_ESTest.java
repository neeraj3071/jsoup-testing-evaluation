/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 09 01:03:18 GMT 2025
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.LineNumberReader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.TokeniserState;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokeniserState_ESTest extends TokeniserState_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataDoubleEscapeEnd;
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0, 1725);
      assertNotNull(characterReader0);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertArrayEquals(new char[] {'Z', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.Rawtext;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1854));
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      CharacterReader characterReader1 = new CharacterReader("aD:,{=TCFG-?-H%U*");
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(characterReader1);
      assertEquals(0, characterReader1.pos());
      
      tokeniserState0.read(tokeniser0, characterReader1);
      assertFalse(characterReader0.equals((Object)characterReader1));
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotSame(characterReader0, characterReader1);
      assertNotSame(characterReader1, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(19, characterReader1.pos());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedEndTagName;
      CharacterReader characterReader0 = new CharacterReader("replacementStr");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CdataSection;
      CharacterReader characterReader0 = new CharacterReader("]]>");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(3, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // There is an unread token pending!
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BogusDoctype;
      StringReader stringReader0 = new StringReader("Ch#<");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(63, 63);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      String string0 = characterReader0.consumeTo("cw<*=X");
      assertEquals("Ch#<", string0);
      assertNotNull(string0);
      assertEquals(4, characterReader0.pos());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(5, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BogusDoctype;
      StringReader stringReader0 = new StringReader("Ch#<");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(63, 63);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypeSystemIdentifier;
      CharacterReader characterReader0 = new CharacterReader("replacementStr");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$65", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypeSystemIdentifier;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypeSystemIdentifier;
      CharacterReader characterReader0 = new CharacterReader("         ");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      tokeniserState0.read((Tokeniser) null, characterReader0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      TokeniserState tokeniserState0 = TokeniserState.DoctypeSystemIdentifier_singleQuoted;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.DoctypeSystemIdentifier_singleQuoted;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      CharacterReader characterReader0 = new CharacterReader("K");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, characterReader0.pos());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.DoctypeSystemIdentifier_doubleQuoted;
      CharacterReader characterReader0 = new CharacterReader("E^H9sQgbEa");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(61, (-1595));
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.DoctypeSystemIdentifier_doubleQuoted;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypeSystemIdentifier;
      CharacterReader characterReader0 = new CharacterReader("_(![-xjvLQ)");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(18, 96);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypeSystemIdentifier;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(127);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypeSystemKeyword;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      CharacterReader characterReader0 = new CharacterReader("K");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(0, characterReader0.pos());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // There is an unread token pending!
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BetweenDoctypePublicAndSystemIdentifiers;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      CharacterReader characterReader0 = new CharacterReader("K");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("K", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(1, characterReader0.pos());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BetweenDoctypePublicAndSystemIdentifiers;
      CharacterReader characterReader0 = new CharacterReader("\"l4");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(62, 62);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BetweenDoctypePublicAndSystemIdentifiers;
      CharacterReader characterReader0 = new CharacterReader("]]>");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(57);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(2, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(2, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(3, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(2, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypePublicIdentifier;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypePublicIdentifier;
      CharacterReader characterReader0 = new CharacterReader("]]>");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(57);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(2, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(2, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(3, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(2, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypePublicIdentifier;
      CharacterReader characterReader0 = new CharacterReader("  ");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(57);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypePublicIdentifier;
      CharacterReader characterReader0 = new CharacterReader("]W\">");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(57);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(2, characterReader0.pos());
      assertEquals(2, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(3, characterReader0.pos());
      assertEquals(3, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.DoctypePublicIdentifier_singleQuoted;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(32768);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.DoctypePublicIdentifier_singleQuoted;
      CharacterReader characterReader0 = new CharacterReader("]]>");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(57);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(2, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(3, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.valueOf("DoctypePublicIdentifier_doubleQuoted");
      CharacterReader characterReader0 = new CharacterReader("DoctypePublicIdentifier_doubleQuoted");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-2194));
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(1, 1318);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      TokeniserState tokeniserState0 = TokeniserState.DoctypePublicIdentifier_doubleQuoted;
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.valueOf("DoctypePublicIdentifier_doubleQuoted");
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0);
      assertNotNull(characterReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-2194));
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypePublicIdentifier;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-3420));
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypePublicIdentifier;
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0);
      assertNotNull(characterReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-453));
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      CharacterReader characterReader1 = new CharacterReader("'Twe`D;");
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(characterReader1);
      assertEquals(0, characterReader1.pos());
      
      tokeniserState0.read(tokeniser0, characterReader1);
      assertFalse(characterReader0.equals((Object)characterReader1));
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotSame(characterReader0, characterReader1);
      assertNotSame(characterReader1, characterReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(1, characterReader1.pos());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypePublicIdentifier;
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0);
      assertNotNull(characterReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-453));
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypePublicKeyword;
      CharacterReader characterReader0 = new CharacterReader("Z|u");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1891));
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypePublicKeyword;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1891));
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterDoctypeName;
      CharacterReader characterReader0 = new CharacterReader("-->");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-46));
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(2, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(3, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // There is an unread token pending!
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.DoctypeName;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      StringReader stringReader0 = new StringReader("MfyX^2tcQ>e4]Gw");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      CharacterReader characterReader1 = new CharacterReader(lineNumberReader0);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(characterReader1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, characterReader1.pos());
      
      String string0 = characterReader1.consumeTagName();
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotSame(characterReader1, characterReader0);
      assertEquals("MfyX^2tcQ", string0);
      assertNotNull(string0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(9, characterReader1.pos());
      
      tokeniserState0.read(tokeniser0, characterReader1);
      assertFalse(characterReader0.equals((Object)characterReader1));
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotSame(characterReader0, characterReader1);
      assertNotSame(characterReader1, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(10, characterReader1.pos());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.DoctypeName;
      CharacterReader characterReader0 = new CharacterReader("Ek'q5!5`{J");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(2, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.DoctypeName;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypeName;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(127);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypeName;
      CharacterReader characterReader0 = new CharacterReader("Pi0");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeDoctypeName;
      CharacterReader characterReader0 = new CharacterReader("{wJ");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(127);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.Doctype;
      CharacterReader characterReader0 = new CharacterReader("Yu9V/yGS6'+26mhi");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(150, (-324));
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.Doctype;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(150, (-324));
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentEndBang;
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'w', '\u0000'}, charArray0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0);
      assertNotNull(characterReader0);
      assertArrayEquals(new char[] {'w', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$50", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentEndBang;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(160);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentEndBang;
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0);
      assertNotNull(characterReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$50", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentEnd;
      CharacterReader characterReader0 = new CharacterReader("br");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(993, 24576);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      String string0 = tokeniser0.unescapeEntities(true);
      assertEquals("br", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(3, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentEnd;
      CharacterReader characterReader0 = new CharacterReader("br");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(993, 24576);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentEndDash;
      StringReader stringReader0 = new StringReader("iOtW3D:Z_");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(4431, 1318);
      assertNotNull(parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      
      TokeniserState tokeniserState0 = TokeniserState.CommentEndDash;
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.valueOf("Comment");
      CharacterReader characterReader0 = new CharacterReader("Comment");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(57);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(7, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(7, characterReader0.pos());
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentStartDash;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      StringReader stringReader0 = new StringReader("MfX^2tcQ>e]Gw");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      CharacterReader characterReader1 = new CharacterReader(lineNumberReader0);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(characterReader1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, characterReader1.pos());
      
      tokeniserState0.read(tokeniser0, characterReader1);
      assertFalse(characterReader0.equals((Object)characterReader1));
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotSame(characterReader0, characterReader1);
      assertNotSame(characterReader1, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, characterReader1.pos());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentStartDash;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$46", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentStart;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      StringReader stringReader0 = new StringReader("MfyX^2tcQ>e4]Gw");
      assertNotNull(stringReader0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      CharacterReader characterReader1 = new CharacterReader(lineNumberReader0);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(characterReader1);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, characterReader1.pos());
      
      tokeniserState0.read(tokeniser0, characterReader1);
      assertFalse(characterReader0.equals((Object)characterReader1));
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotSame(characterReader0, characterReader1);
      assertNotSame(characterReader1, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(1, characterReader1.pos());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CommentStart;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.valueOf("MarkupDeclarationOpen");
      CharacterReader characterReader0 = new CharacterReader("MarkupDeclarationOpen");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(32, 0);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.SelfClosingStartTag;
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.SelfClosingStartTag;
      CharacterReader characterReader0 = new CharacterReader("x'}");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      ParseErrorList parseErrorList0 = new ParseErrorList(29, 29);
      assertNotNull(parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      TokeniserState tokeniserState0 = TokeniserState.AfterAttributeValue_quoted;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterAttributeValue_quoted;
      CharacterReader characterReader0 = new CharacterReader("Yu9V/yGS6'E+26mhi");
      ParseErrorList parseErrorList0 = new ParseErrorList(150, (-324));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AttributeValue_singleQuoted;
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      CharacterReader characterReader0 = new CharacterReader("K");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$39", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AttributeValue_singleQuoted;
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 5, 0);
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0, 0);
      ParseErrorList parseErrorList0 = new ParseErrorList(0, 5);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$39", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AttributeValue_doubleQuoted;
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$38", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataDoubleEscapedDash;
      CharacterReader characterReader0 = new CharacterReader("!");
      ParseErrorList parseErrorList0 = new ParseErrorList(4431, 1318);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      TokeniserState tokeniserState1 = TokeniserState.AttributeValue_doubleQuoted;
      // Undeclared exception!
      try { 
        tokeniserState1.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$38", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeAttributeValue;
      CharacterReader characterReader0 = new CharacterReader("]");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1891));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      // Undeclared exception!
      try { 
        tokeniser0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$40", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeAttributeValue;
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1891));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeAttributeValue;
      CharacterReader characterReader0 = new CharacterReader("`");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1891));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$37", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterAttributeName;
      CharacterReader characterReader0 = new CharacterReader("BeforeAttributeName");
      char[] charArray0 = new char[0];
      characterReader0.consumeToAny(charArray0);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(95);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(20, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.AfterAttributeName;
      CharacterReader characterReader0 = new CharacterReader("AttributeName");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(95);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$36", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BeforeAttributeName");
      char[] charArray0 = new char[0];
      characterReader0.consumeToAny(charArray0);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(95);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.valueOf("BeforeAttributeName");
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(20, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BeforeAttributeName");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(95);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.valueOf("BeforeAttributeName");
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$34", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BeforeAttributeName;
      CharacterReader characterReader0 = new CharacterReader("<@h[o(nP");
      ParseErrorList parseErrorList0 = new ParseErrorList(98, (-587));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$34", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.valueOf("ScriptDataDoubleEscapedLessthanSign");
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.TokeniserState$1");
      ParseErrorList parseErrorList0 = new ParseErrorList(51, 51);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.TokeniserState$50");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-3396));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataDoubleEscapedDashDash;
      characterReader0.consumeTo("``<Hd](");
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(35, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.TokeniserState$50");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-3396));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataDoubleEscapedDashDash;
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataDoubleEscapedDash;
      CharacterReader characterReader0 = new CharacterReader("&nbsp;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.read();
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataDoubleEscapedDash;
      CharacterReader characterReader0 = new CharacterReader("&nbsp;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      tokeniser0.read();
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedEndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("crt^)(UL!aSA`");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedEndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("crt^)(UL!aSA`");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      CharacterReader characterReader1 = new CharacterReader("");
      tokeniserState0.read(tokeniser0, characterReader1);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedLessthanSign;
      CharacterReader characterReader0 = new CharacterReader("Izwx9)I=:!?J$@-'%K");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedDashDash;
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = new ParseErrorList(47, 0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedDash;
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = new ParseErrorList(6, 1491);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, parseErrorList0.size());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapeStartDash;
      CharacterReader characterReader0 = new CharacterReader("`:#W6_B@Ovty7gO]");
      ParseErrorList parseErrorList0 = new ParseErrorList(92, 92);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapeStart;
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = new ParseErrorList(62, 62);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataLessthanSign;
      CharacterReader characterReader0 = new CharacterReader("replacementStr");
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$17", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RawtextLessthanSign;
      CharacterReader characterReader0 = new CharacterReader("/t!sfHMx,Y");
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RawtextLessthanSign;
      CharacterReader characterReader0 = new CharacterReader("replacementStr");
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$14", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RCDATAEndTagName;
      CharacterReader characterReader0 = new CharacterReader("replacementStr");
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$13", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RCDATAEndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("replacementStr");
      ParseErrorList parseErrorList0 = new ParseErrorList(107, 81);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RCDATAEndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = new ParseErrorList(4431, 1332);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RcdataLessthanSign;
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.TokeniserState$50");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-3396));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RcdataLessthanSign;
      CharacterReader characterReader0 = new CharacterReader("%7Y}O@RfpFzD5");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.EndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("E^H9sQgbEa");
      ParseErrorList parseErrorList0 = new ParseErrorList(61, (-1595));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      characterReader0.consume();
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.EndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("E^H9sQgbEa");
      ParseErrorList parseErrorList0 = new ParseErrorList(61, (-1595));
      characterReader0.matchConsume("E^H9sQgbEa");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.EndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("E^H9sQgbEa");
      ParseErrorList parseErrorList0 = new ParseErrorList(61, (-1595));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.TagOpen;
      StringReader stringReader0 = new StringReader("k#tIoKH2DT&yjS\"/~");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      CharacterReader characterReader0 = new CharacterReader(bufferedReader0);
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$8", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.PLAINTEXT;
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      StringReader stringReader0 = new StringReader("MfyX^2tcQ>e4]Gw");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      CharacterReader characterReader1 = new CharacterReader(lineNumberReader0);
      tokeniserState0.read(tokeniser0, characterReader1);
      assertEquals(15, characterReader1.pos());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.PLAINTEXT;
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = new ParseErrorList(4431, 1318);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.Rcdata;
      CharacterReader characterReader0 = new CharacterReader("(Q8T]yWy!{dx\"QPE");
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
      tokeniserState0.read(tokeniser0, characterReader0);
      // Undeclared exception!
      try { 
        tokeniserState0.read((Tokeniser) null, characterReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TokeniserState$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.Rcdata;
      CharacterReader characterReader0 = new CharacterReader("&mr-qui,Tfg#i#A};AE");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1854));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("^`-}L*^Bj<640");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(15);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniser0.read();
      assertFalse(parseErrorList0.isEmpty());
      assertEquals(14, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.BogusComment;
      CharacterReader characterReader0 = new CharacterReader("AttributeName");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      // Undeclared exception!
      try { 
        tokeniserState0.read(tokeniser0, characterReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataDoubleEscapeEnd;
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharacterReader characterReader0 = new CharacterReader(charArrayReader0, 1725);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataDoubleEscapeStart;
      CharacterReader characterReader0 = new CharacterReader("^`-}L*^Bj<640");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(15);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      tokeniser0.read();
      assertEquals(14, characterReader0.pos());
      assertEquals(1, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&nbsp;");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEscapedEndTagName;
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEndTagName;
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(52);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptDataEndTagOpen;
      CharacterReader characterReader0 = new CharacterReader("]]>");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(57);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RawtextEndTagName;
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(45);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.CharacterReferenceInRcdata;
      CharacterReader characterReader0 = new CharacterReader("p0bNpKOpxc");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(198);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.Rawtext;
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1854));
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.ScriptData;
      CharacterReader characterReader0 = new CharacterReader("");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(127);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.valueOf("RawtextEndTagOpen");
      CharacterReader characterReader0 = new CharacterReader("RawtextEndTagOpen");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(4);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TokeniserState tokeniserState0 = TokeniserState.RCDATAEndTagName;
      CharacterReader characterReader0 = new CharacterReader("_(![xjvLQ)");
      ParseErrorList parseErrorList0 = new ParseErrorList(45, 96);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      tokeniserState0.read(tokeniser0, characterReader0);
      assertEquals(0, characterReader0.pos());
  }
}
