/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 09 00:56:44 GMT 2025
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iVB0r<h>pJbWa_#wC", "AfterDoctypeSystemKeyword");
      assertEquals("AfterDoctypeSystemKeyword", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("g\"!AWOYQ}gC");
      parser0.parseInput((Reader) stringReader0, "g\"!AWOYQ}gC");
      assertFalse(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      
      parser0.setTrackErrors(225);
      parser0.parseInput("", "$ e^xVn >X''~B,e");
      assertTrue(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "$ e^xVn >X''~B,e");
      ParseErrorList parseErrorList0 = new ParseErrorList(225, 225);
      Parser.parseFragment("reversed", (Element) document0, "Split offset must not be greater than current text length", parseErrorList0);
      assertEquals("$ e^xVn >X''~B,e", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.getTreeBuilder();
      assertFalse(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.getErrors();
      assertFalse(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Parser parser1 = parser0.setTrackErrors(100);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      // Undeclared exception!
      try { 
        parser1.parseInput((Reader) pipedReader0, "]9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser.parseXmlFragment("", "TA[7h");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser1.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser1 = parser0.setTreeBuilder(xmlTreeBuilder0);
      assertFalse(parser1.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = Parser.unescapeEntities("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.settings();
      assertFalse(parser0.isTrackErrors());
  }
}
